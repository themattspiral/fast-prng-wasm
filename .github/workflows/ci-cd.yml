name: CI/CD

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4

      - name: 🛠️ Set up Node.js 20 for build
        uses: actions/setup-node@v4
        with:
          node-version: '20' # required by AssemblyScript 0.28+
          cache: 'npm'

      - name: 📦 Install dependencies (CI)
        run: npm ci

      - name: 📝 Check docs are up to date
        run: |
          npm run docs
          git diff --exit-code --name-only
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Build project
        run: npm run build

      - name: ⬆️ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            dist/
            package.json
            README.md
            LICENSE.md
          retention-days: 7

  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18', '20', '22']
    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4

      - name: 🛠️ Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install dependencies (CI)
        run: npm ci

      - name: ⬇️ Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: .

      - name: 🧪 Run AssemblyScript tests with coverage
        run: npm run test:as:coverage

      - name: 🧪 Run JavaScript tests with coverage
        run: npm run test:js:coverage

      - name: 🔄 Convert AS coverage to lcov format
        if: matrix.node-version == '18'
        run: node util/convert-as-coverage-to-lcov.mjs

      - name: 📊 Upload coverage to Codecov (AssemblyScript)
        if: matrix.node-version == '18'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/as/lcov.info
          flags: assemblyscript
          name: AssemblyScript Coverage
          fail_ci_if_error: true
          disable_search: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: 📊 Upload coverage to Codecov (JavaScript)
        if: matrix.node-version == '18'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/js/lcov.info
          flags: javascript
          name: JavaScript Coverage
          fail_ci_if_error: true
          disable_search: true
          token: ${{ secrets.CODECOV_TOKEN }}

  version_and_release:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write       # commit package.json, create tag & create release in GH
      issues: write         # let semantic-release close & link resolved issues in the release
      pull-requests: write  # let semantic-release update PRs that are part of the release
      id-token: write       # Trusted Publisher OIDC authentication for npm
    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: 🛠️ Set up Node.js for publishing
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          always-auth: true

      - name: ⬆️ Upgrade npm for OIDC support
        run: npm install -g npm@latest
      
      - name: 📦 Install dependencies (CI)
        run: npm ci
      
      - name: ⬇️ Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: .
      
      - name: 🚀 Run semantic-release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        with:
          extra_plugins: |
            @semantic-release/npm@^12.0.0
            @semantic-release/github@^10.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📦 Publish to npm
        if: steps.semantic.outputs.new_release_published == 'true'
        run: npm publish *.tgz --provenance --access public